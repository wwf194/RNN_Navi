{
    "Type": "RNNLIF",
    "InitTasks":[
        {
            "Type": "FunctionCall",
            "Args":[
                //"&*InitModules"
            ]
        }
    ],
    "Neurons":{
        "Input":{
            "Num":"$^param.agent.model.Input.Num"
        },
        "Recurrent":{
            "ExciInhi":{
                "Enable": true,
                "Weight": [
                    "&Modules.Recurrent.Weight",
                    "&Modules.Output.Weight"
                ]
            },
            "Num": 2048,
            "Excitatory":{
                "Ratio": 0.8
            },
            "Inhibitory":{},
            "NonLinear":"ReLU"
        },
        "Output":{
            "Num": "$Neurons.Recurrent.Num // 4"
        },
        "Num": "$Neurons.Recurrent.Num"
    },
    "Modules":{
        "Recurrent":{
            "Type":"RecurrentLIFLayer",
            "Subtype":"f(Wx+b)",
            "Weight":{
                "Size":["$Neurons.Recurrent.Num", "$Neurons.Recurrent.Num"],
                "Init":{
                    "Method": "kaiming",
                    "Coefficient": 1.0e-1
                }
            },
            "Bias": true,
            "TimeConstance": 0.1,
            "Modules":{
                "NonLinear.Init":"$Neurons.Recurrent.NonLinear",
                "HiddenStateTransform":{
                    "Type": "SingleLayer",
                    "Subtype": "Wx",
                    "IsExciInhi": "$Neurons.Recurrent.IsExciInhi",
                    "Input.Num": "$Neurons.Recurrent.Num",
                    "Output.Num": "$Neurons.Recurrent.Num",
                },
                "CellStateDecay":{
                    "IsExciInhi": "$Neurons.Recurrent.IsExciInhi",
                },
                "NoiseGenerator":{
                    "Type": "NoiseGenerator",
                    "SubType": "Gaussian",
                    "Method": "Adaptive",
                    "SubMethod": "AccordingToInputStd",
                    "StdRatio": 0.05,
                }
            },
            "Router":{
                "In": ["cellState", "recurrentInput", "input"],
                "Out": ["cellState", "hiddenState", "output"],
                "Routings":[
                    "&GetBias |--> bias",
                    "recurrentInput, input, bias |--> &Add |--> inputTotal",
                    "inputTotal |--> NoiseGenerator |--> noise",
                    "inputTotal, noise |--> &Add |--> inputTotal",
                    "inputTotal, cellState |--> &ProcessInputTotalAndcellState |--> cellState",
                    "cellState |--> &NonLinear |--> firingRate",
                    "firingRate |--> &HiddenStateTransform |--> recurrentInput",
                    "cellState |--> &CellStateDecay |--> cellState"
                ]
            }
        },
        "Output":{
            "Type":"SingleLayer",
            "Subtype":"Wx+b",
            "Weight":{
                "Size":["$Neurons.Recurrent.Num", "$Neurons.Output.Num"],
                "Init":{
                    "Method": "kaiming",
                    "Coefficient": 1.0e-1
                }
            },
            "Bias":true,
            //"NonLinear":"$Neurons.Recurrent.NonLinear"
        },
        "Input":{
            "Type": "SingleLayer",
            "Subtype":"f(Wx+b)",
            "Input.Num":"$Neurons.Input.Num",
            "Output.Num":"$Neurons.Recurrent.Num",
            "Weight":{
                "Init":{
                    "Method": "kaiming",
                    "Coefficient": 1.0e-1
                }
            },
            "Bias": true,
            "NonLinear":"$Neurons.Recurrent.NonLinear"
        },
        "Init":{
            "Type":"MLP",
            "Output":{"Num":"$Neurons.Recurrent.Num"},
            "Init.Method":"FromNeuronNum",
            "Neurons":{
                "Num":[
                    "$^param.agent.model.InputInit.Num",
                    "$Neurons.Recurrent.Num ",
                    "$Neurons.Recurrent.Num * 2"
                ]
            },
            "Layers":{
                "Num": "len($Modules.Init.Neurons.Num) - 1",
                "NonLinear": "$Neurons.Recurrent.NonLinear",
                "Bias": true,
                "NonLinearOnLastLayer": false,
            }
        },
        "OutputReceiver":{
            "Type":"SerialReceiver",
            "ExtractMethod.Init":{
                "Method": "eval",
                //"Args": "lambda List, Index:torch.take(input=List, index=Index, axis=1)" //torch.take requires index to be LongTensor
                "Args": "lambda List, Index: List[:, Index, :]"
            }
        },
        "InputSender":{
            "Type":"SerialSender",
            "ExtractMethod.Init":{
                "Method": "eval",
                //"Args": "lambda List, Index:torch.take(input=List, index=Index, axis=1)" //torch.take requires index to be LongTensor
                "Args": "lambda List, Index: List[:, Index, :]"
            }
        },
        "Splitter":{
            "Type": "Lambda",
            "Num": "$Neurons.Recurrent.Num",
            //"Lambda": "# \"lambda data:(data[:, :\" + \"$~Num\" + \"], data[:, \" + \"$~Num\" + \":])\""
            "Lambda": "lambda data:[data[:, :($Neurons.Recurrent.Num)], data[:, ($Neurons.Recurrent.Num):]]"
        }
    },
    "Dynamics":{
        "Run":{
            "In":["inputInit", "inputSeries", "time"],
            "Out":["OutputSeries"],
            "Routings":[
                "inputSeries |--> &InputSender.Receive |-->",
                "inputInit |--> &Init |--> state",
                "state |--> &Splitter |--> hiddenState, cellState",
                "hiddenState, cellState |--> &Iterate |--> hiddenState, cellState, Output || repeat=%time",
                "|--> &OutputReceiver.Send |--> OutputSeries"
            ]
        },
        "Iterate":{
            "In":["hiddenState", "cellState"],
            "Out":["hiddenState", "cellState"],
            "Routings":[
                "|--> &InputSender.Send |--> input",
                "input |-->&Input |--> inputProcessed",
                "inputProcessed, hiddenState, cellState |--> &Recurrent |--> hiddenState, cellState, outputRecurrent",
                "outputRecurrent |--> &OutputReceiver.Receive |-->",
            ]
        },
        "__Entry__":"&Dynamics.Run"
    },
}