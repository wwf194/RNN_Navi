[
    {
        "Type":"LoadJsonFile",
        "Args":[
            {
                "FilePath":"./params/RNNLIF.jsonc",
                "MountPath":"&^param.model",
            },
            {
                "FilePath":"./params/arena_square.jsonc",
                "MountPath":"&^param.world"
            },
            {
                "FilePath":"./params/agent.jsonc",
                "MountPath":"&^param.agent"
            }
        ]
    },
    {
        "Type":"ParseParamStatic",
    },
    {
        "Type":"BuildObject",
        "Args":[
            {
                "ParamPath": "&^param.model",
                "ModulePath": "Models.RNNLIF",
                "MountPath": "&^object.agent.brain",
            },
            {
                "ParamPath": "&^param.world",
                "ModulePath": "World2D.Arenas2D",
                "MountPath": "&^object.world",
            },
            {
                "ParamPath": "&^param.agent",
                "ModulePath": "Agents.AgentPoint2D",
                "MountPath": "&^object.agent"
            }
        ]
    },
    {
        "Type": "FunctionCall",
        "Args":[
            ["&^world.InitFromParam", []],
            ["&^agent.InitFromParam", []],
            ["&^agent.PlotPlaceCells", []],
            ["&^agent.GenerateRandomTrajectoris", ["Num=50"]]
        ]
    },
    {
        "Type": "Train",
        "Args": {
            "Type": "SupervisedLearning",
            "Method": "GradientDescend",
            "Mode": "EpochBatch",
            "Epoch.Num": 200,
            "Batch.Num": "$1000 * 2$",
            "Batch.Size": "200",
            "TrajectoryConfig": {
                "Num": "$Args.batch.size",
                "StepPerBatch": 50,
                "Arena": "&^world.GetArenaByIndex(0)"
            },
            "Batch.Internal":[
                "&TrajectoryConfig |--> &agent.GenerateRandomTrajectory |--> Trajectory",
                "Trajectory |--> &agent.GenerateModelInput |--> ModelInput",
                "Trajectory |--> &agent.GenerateModelOutput |--> ModelOutputTarget",
                "[ModelInput, ModelOutputTraget] |--> &Model.Train |--> ModelOutput",
            ]
        }
    },
]



